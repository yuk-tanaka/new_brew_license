<?php

use App\Utilities\Wareki;
use Carbon\Carbon;

class WarekiTest extends TestCase
{
    /** @var Wareki */
    private $wareki;

    /**
     *
     */
    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->wareki = new Wareki();
    }

    /**1
     * @dataProvider provideConvertParams
     * @param string $gengou
     * @param int $warekiYear
     * @param int $month
     * @param int $day
     * @param Carbon $expected
     */
    public function testConvert(string $gengou, int $warekiYear, int $month, int $day, Carbon $expected)
    {
        $this->assertEquals($expected, $this->wareki->convert($gengou, $warekiYear, $month, $day));
    }

    /**
     * @dataProvider provideConvertIllegalParams
     * @expectedException InvalidArgumentException
     * @param string $gengou
     * @param int $warekiYear
     * @param int $month
     * @param int $day
     */
    public function testConvertFailed(string $gengou, int $warekiYear, int $month, int $day)
    {
        $this->wareki->convert($gengou, $warekiYear, $month, $day);
    }

    public function provideConvertParams()
    {
        return [
            ['平成', 30, 12, 1, Carbon::parse('2018-12-01')],
            ['平成', 31, 1, 1, Carbon::parse('2019-01-01')],
            ['平成', 31, 1, 31, Carbon::parse('2019-01-31')],
            ['平成', 31, 12, 31, Carbon::parse('2019-12-31')],
        ];
    }

    public function provideConvertIllegalParams()
    {
        return [
            ['例外', 30, 12, 1],
        ];
    }

    /**
     * @dataProvider provideParseParams
     * @param string $wareki
     * @param Carbon $expected
     */
    public function testParse(string $wareki, Carbon $expected)
    {
        $this->assertEquals($expected, $this->wareki->parse($wareki));
    }

    /**
     * @dataProvider provideParseIllegalParams
     * @expectedException InvalidArgumentException
     * @param string $wareki
     */
    public function testParseFailed(string $wareki)
    {
        $this->wareki->parse($wareki);
    }

    public function provideParseParams()
    {
        return [
            ['平成30年12月1日', Carbon::parse('2018-12-01')],
            ['平成31年1月1日', Carbon::parse('2019-01-01')],
            ['平成31年1月31日', Carbon::parse('2019-01-31')],
            ['平成31年12月31日', Carbon::parse('2019-12-31')],
        ];
    }

    public function provideParseIllegalParams()
    {
        return [
            ['不正な値'],
        ];
    }

    /**
     * @dataProvider provideParseNextScrapingUrlStringParams
     * @param Carbon $last
     * @param $expected
     */
    public function testParseNextScrapingUrlString(Carbon $last, string $expected)
    {
        $this->assertEquals($expected, $this->wareki->parseNextScrapingUrlString($last));
    }

    public function provideParseNextScrapingUrlStringParams()
    {
        return [
            [Carbon::parse('2018-12-01'), 'h31/01'],
            [Carbon::parse('2019-01-01'), 'h31/02'],
            [Carbon::parse('2019-01-31'), 'h31/02'],
            [Carbon::parse('2019-12-31'), 'h32/01'],
        ];
    }
}
